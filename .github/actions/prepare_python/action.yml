name: "Prepare Python"
description: "Python ランタイムと依存パッケージをインストールし、Python バージョンを出力する"

inputs:
  dependency-group:
    description: "uv の依存パッケージインストール時に指定するグループ"
    required: false
outputs:
  python-version:
    description: "Python version"
    value: ${{ steps.export-python-version.outputs.python-version }}

runs:
  using: "composite"
  steps:
    - name: <Setup> Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: false
        cache-local-path: ${{ runner.os == 'Windows' && 'C:\\tmp\\.uv-cache' || '/tmp/.uv-cache' }}

    - name: <Setup> Restore uv cache
      id: uv-cache
      uses: actions/cache@v4
      with:
        path: /tmp/.uv-cache
        key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          uv-${{ runner.os }}

    - name: <Setup> Install Python dependencies
      run: |
        if [[ -n "${{ inputs.dependency-group }}" ]]; then
          uv sync --group ${{ inputs.dependency-group }}
        else
          uv sync
        fi
      shell: bash

    - name: <Deploy> Export Python version
      id: export-python-version
      run: |
        PYTHON_VERSION=$(
          uv run python -c 'import platform; print(platform.python_version())'
        )
        echo "python-version=${PYTHON_VERSION}" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Minimize uv cache
      run: uv cache prune --ci
      shell: bash
