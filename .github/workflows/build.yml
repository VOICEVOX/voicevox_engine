name: build
on:
  push:
    branches:
      - master
  release:
    types:
      - created
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/voicevox_engine
  PYTHON_VERSION: '3.8.10'
  VOICEVOX_RESOURCE_VERSION: '0.10.preview.3'
  VOICEVOX_CORE_VERSION: '0.10.preview.7'
  VOICEVOX_ENGINE_VERSION: |- # releaseのときはタグが、それ以外はlatestがバージョン名に
    ${{ github.event.release.tag_name != '' && github.event.release.tag_name || 'latest' }}

jobs:
  # Build Mac binary (x64 arch only)
  build-mac:
    strategy:
      matrix:
        include:
        - os: macos-11
          python_architecture: "x64"
          pip_cache_path: ~/Library/Caches/pip
          voicevox_core_library_name: libcore_cpu_universal2.dylib
          onnxruntime_url: https://github.com/microsoft/onnxruntime/releases/download/v1.10.0/onnxruntime-osx-universal2-1.10.0.tgz
          artifact_name: macos-x64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install CCache
        shell: bash
        run: brew install ccache

      # NOTE: The default sed of macOS is BSD sed.
      #       There is a difference in specification between BSD sed and GNU sed,
      #       so you need to install GNU sed.
      - name: Install GNU sed on macOS
        shell: bash
        run: brew install gnu-sed

      - name: Create download and build directory
        run: mkdir download build

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.python_architecture }}

      - name: Prepare Python dependencies cache
        uses: actions/cache@v2
        id: pip-cache
        with:
          path: ${{ matrix.pip_cache_path }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        shell: bash
        run: |
          pip install --upgrade pip setuptools wheel
          pip install -r requirements-dev.txt

      - name: Generate licenses.json
        shell: bash
        run: |
          python generate_licenses.py > licenses.json

      # Download ONNX Runtime
      - name: Export ONNX Runtime url to calc hash
        shell: bash
        run: echo "${{ matrix.onnxruntime_url }}" > download/onnxruntime_url.txt

      - name: Prepare ONNX Runtime cache
        uses: actions/cache@v2
        id: onnxruntime-dylib-cache
        with:
          key: ${{ matrix.os }}-onnxruntime-dylib-${{ hashFiles('download/onnxruntime_url.txt') }}-v1
          path: download/onnxruntime

      - name: Download ONNX Runtime
        if: steps.onnxruntime-dylib-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L "${{ matrix.onnxruntime_url }}" > download/onnxruntime.tgz

          # extract only dylibs
          mkdir -p download/onnxruntime
          tar xf "download/onnxruntime.tgz" -C "download/onnxruntime" --strip-components 1 'onnxruntime-*/lib/*.dylib'
          rm download/onnxruntime.tgz

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h

      # Download VOICEVOX RESOURCE
      - name: Prepare VOICEVOX RESOURCE cache
        uses: actions/cache@v2
        id: voicevox-resource-cache
        with:
          key: voicevox-resource-${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      - name: Checkout VOICEVOX RESOURCE
        if: steps.voicevox-resource-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: VOICEVOX/voicevox_resource
          ref: ${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      # Merge VOICEVOX RESOURCE
      - name: Merge VOICEVOX RESOURCE
        shell: bash
        run: |
          set -eux
          rm -r speaker_info
          cp -r download/resource/character_info speaker_info

      - name: Prepare VOICEVOX Core release cache
        uses: actions/cache@v2
        id: voicevox-core-cache
        with:
          key: ${{ matrix.os }}-voicevox-core-${{ env.VOICEVOX_CORE_VERSION }}
          path: download/core

      - name: Download VOICEVOX Core release
        if: steps.voicevox-core-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          # extracted like download/core/metas.json
          curl -L "https://github.com/VOICEVOX/voicevox_core/releases/download/${{ env.VOICEVOX_CORE_VERSION }}/core.zip" > download/core.zip
          ditto -x -k --sequesterRsrc --rsrc download/core.zip download/
          rm download/core.zip

      - name: Download PyOpenJTalk dictionary
        shell: bash
        run: |
          set -eux

          # Download pyopenjtalk dictionary
          # try 5 times, sleep 5 seconds before retry
          for i in $(seq 5); do
            EXIT_CODE=0
            python -c "import pyopenjtalk; pyopenjtalk._lazy_init()" || EXIT_CODE=$?

            if [ "$EXIT_CODE" = "0" ]; then
              break
            fi

            sleep 5
          done

          if [ "$EXIT_CODE" != "0" ]; then
            exit "$EXIT_CODE"
          fi

      - name: Build run.py
        run: |
          set -eux

          # Replace version
          gsed -i "s/__version__ = \"latest\"/__version__ = \"${{ env.VOICEVOX_ENGINE_VERSION }}\"/" ../voicevox_engine/__init__.py

          # Nuitka does not copy grandchild dependencies. Explicitly copy libonnxruntime
          python -m nuitka \
            --output-dir=./ \
            --standalone \
            --plugin-enable=numpy \
            --plugin-enable=multiprocessing \
            --follow-import-to=numpy \
            --follow-import-to=aiofiles \
            --include-package=uvicorn \
            --include-package=anyio \
            --include-package-data=pyopenjtalk \
            --include-package-data=scipy \
            --include-data-file=../licenses.json=./ \
            --include-data-file=../presets.yaml=./ \
            --include-data-file=../user.dic=./ \
            --include-data-file=../download/core/*.bin=./ \
            --include-data-file=../download/core/metas.json=./ \
            --include-data-file=../download/core/${{ matrix.voicevox_core_library_name }}=./ \
            --include-data-file=../download/onnxruntime/lib/libonnxruntime.dylib=./ \
            --include-data-file=${{ env.pythonLocation }}/lib/python*/site-packages/scipy/.dylibs/*.dylib=./scipy/.dylibs/ \
            --include-data-file=${{ env.pythonLocation }}/lib/python*/site-packages/_soundfile_data/*=./_soundfile_data/ \
            --include-data-dir=../speaker_info=./speaker_info \
            --follow-imports \
            --no-prefer-source-code \
            ../run.py
        working-directory: build

      - name: Set @rpath to @executable_path
        run: |
          install_name_tool -add_rpath @executable_path/. build/run.dist/run

      # NOTE: This task should ideally be done by Nuitka in the `Build run.py` step.
      # Please remove this step when you have solved the problem with Nuitka.
      - name: Copy the missing .dylib files into the distribution
        run: |
          python build_util/macos/copy_missing_dylibs.py build/run.dist/

      # NOTE: This task should ideally be done by Nuitka in the `Build run.py` step.
      # Please remove this step when you have solved the problem with Nuitka.
      - name: Fix the rpaths of the .dylib files in the distribution
        run: |
          python build_util/macos/fix_rpaths.py build/run.dist/

      # FIXME: versioned name may be useful; but
      # actions/download-artifact and dawidd6/download-artifact do not support
      # wildcard / forward-matching yet.
      # Currently, It is good to use static artifact name for future binary test workflow.
      # https://github.com/actions/toolkit/blob/ea81280a4d48fb0308d40f8f12ae00d117f8acb9/packages/artifact/src/internal/artifact-client.ts#L147
      # https://github.com/dawidd6/action-download-artifact/blob/af92a8455a59214b7b932932f2662fdefbd78126/main.js#L113
      - uses: actions/upload-artifact@v2
        # env:
        #   VERSIONED_ARTIFACT_NAME: |
        #     ${{ format('{0}-{1}', matrix.artifact_name, (github.event.release.tag_name != '' && github.event.release.tag_name) || github.sha) }}
        with:
          name: ${{ matrix.artifact_name }}
          path: build/run.dist/

  # Build Linux binary (push only buildcache image)
  build-linux:
    strategy:
      matrix:
        os: [ubuntu-latest]
        tag:
          - build-cpu-ubuntu18.04
          - build-nvidia-ubuntu18.04
        include:
        - tag: build-cpu-ubuntu18.04
          runtime_tag: cpu-ubuntu18.04 # for cache use
          target: build-env
          base_image: ubuntu:bionic
          base_runtime_image: ubuntu:bionic
          voicevox_core_library_name: libcore_cpu_x64.so
          onnxruntime_url: https://github.com/microsoft/onnxruntime/releases/download/v1.10.0/onnxruntime-linux-x64-1.10.0.tgz
          artifact_name: linux-cpu
          nuitka_cache_path: nuitka_cache
        - tag: build-nvidia-ubuntu18.04
          runtime_tag: nvidia-ubuntu18.04 # for cache use
          target: build-env
          base_image: ubuntu:bionic
          base_runtime_image: nvidia/cuda:11.4.2-cudnn8-runtime-ubuntu18.04
          voicevox_core_library_name: libcore_gpu_x64_nvidia.so
          onnxruntime_url: https://github.com/microsoft/onnxruntime/releases/download/v1.10.0/onnxruntime-linux-x64-gpu-1.10.0.tgz
          artifact_name: linux-nvidia
          nuitka_cache_path: nuitka_cache

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Download VOICEVOX RESOURCE
      - name: Prepare VOICEVOX RESOURCE cache
        uses: actions/cache@v2
        id: voicevox-resource-cache
        with:
          key: voicevox-resource-${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      - name: Checkout VOICEVOX RESOURCE
        if: steps.voicevox-resource-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: VOICEVOX/voicevox_resource
          ref: ${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      # Merge VOICEVOX RESOURCE
      - name: Merge VOICEVOX RESOURCE
        shell: bash
        run: |
          set -eux
          rm -r speaker_info
          cp -r download/resource/character_info speaker_info

      # NOTE: `load: true` may silently fail when the GitHub Actions disk (14GB) is full.
      # https://docs.github.com/ja/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
      - name: Create binary build environment with Docker
        uses: docker/build-push-action@v2
        env:
          IMAGE_TAG: ${{ env.IMAGE_NAME }}:${{ matrix.tag }}${{ (matrix.tag != '' && '-') || '' }}latest
          RUNTIME_IMAGE_TAG: ${{ env.IMAGE_NAME }}:${{ matrix.runtime_tag }}${{ (matrix.runtime_tag != '' && '-') || '' }}latest
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            BASE_RUNTIME_IMAGE=${{ matrix.base_runtime_image }}
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
            VOICEVOX_ENGINE_VERSION=${{ env.VOICEVOX_ENGINE_VERSION }}
            VOICEVOX_CORE_VERSION=${{ env.VOICEVOX_CORE_VERSION }}
            VOICEVOX_CORE_LIBRARY_NAME=${{ matrix.voicevox_core_library_name }}
            ONNXRUNTIME_URL=${{ matrix.onnxruntime_url }}
          target: ${{ matrix.target }}
          load: true
          tags: |
            ${{ env.IMAGE_TAG }}
          cache-from: |
            type=registry,ref=${{ env.IMAGE_TAG }}-buildcache
            type=registry,ref=${{ env.RUNTIME_IMAGE_TAG }}-buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_TAG }}-buildcache,mode=max

      # Build run.py with Nuitka in Docker
      - name: Cache Nuitka (ccache, module-cache)
        uses: actions/cache@v2
        id: nuitka-cache
        with:
          path: ${{ matrix.nuitka_cache_path }}
          key: ${{ runner.os }}-nuitka-${{ matrix.tag }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nuitka-${{ matrix.tag }}-

      - name: Build run.py with Nuitka in Docker
        env:
          IMAGE_TAG: ${{ env.IMAGE_NAME }}:${{ matrix.tag }}${{ (matrix.tag != '' && '-') || '' }}latest
        run: |
          docker run --rm \
            -v "$(readlink -f "${{ matrix.nuitka_cache_path }}"):/home/user/.cache/Nuitka" \
            -v "$(readlink -f "build"):/opt/voicevox_engine_build" \
            "${{ env.IMAGE_TAG }}"

      # FIXME: versioned name may be useful; but
      # actions/download-artifact and dawidd6/download-artifact do not support
      # wildcard / forward-matching yet.
      # Currently, It is good to use static artifact name for future binary test workflow.
      # https://github.com/actions/toolkit/blob/ea81280a4d48fb0308d40f8f12ae00d117f8acb9/packages/artifact/src/internal/artifact-client.ts#L147
      # https://github.com/dawidd6/action-download-artifact/blob/af92a8455a59214b7b932932f2662fdefbd78126/main.js#L113
      - uses: actions/upload-artifact@v2
        # env:
        #   VERSIONED_ARTIFACT_NAME: |
        #     ${{ format('{0}-{1}', matrix.artifact_name, (github.event.release.tag_name != '' && github.event.release.tag_name) || github.sha) }}
        with:
          name: ${{ matrix.artifact_name }}
          path: build/run.dist/

  build-windows:
    strategy:
      matrix:
        include:
        # Windows CPU
        - os: windows-2019
          python_architecture: 'x64'
          voicevox_core_dll_name: core_cpu_x64.dll
          onnxruntime_url: https://github.com/microsoft/onnxruntime/releases/download/v1.10.0/onnxruntime-win-x64-1.10.0.zip
          ccache_url: https://github.com/ccache/ccache/releases/download/v4.4.1/ccache-4.4.1-windows-64.zip
          artifact_name: windows-cpu
          nuitka_cache_path: nuitka_cache
          pip_cache_path: ~\AppData\Local\pip\Cache
        # Windows NVIDIA GPU
        - os: windows-2019
          python_architecture: 'x64'
          voicevox_core_dll_name: core_gpu_x64_nvidia.dll
          onnxruntime_url: https://github.com/microsoft/onnxruntime/releases/download/v1.10.0/onnxruntime-win-x64-gpu-1.10.0.zip
          cuda_version: '11.4.2'
          cudnn_url: https://developer.download.nvidia.com/compute/redist/cudnn/v8.2.4/cudnn-11.4-windows-x64-v8.2.4.15.zip
          ccache_url: https://github.com/ccache/ccache/releases/download/v4.4.1/ccache-4.4.1-windows-64.zip
          artifact_name: windows-nvidia
          nuitka_cache_path: nuitka_cache
          pip_cache_path: ~\AppData\Local\pip\Cache

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h

      # Download CUDA
      - name: Prepare CUDA DLL cache
        if: matrix.cuda_version != ''
        uses: actions/cache@v2
        id: cuda-dll-cache
        with:
          # update this key when ONNX Runtime CUDA dependency changed
          key: ${{ matrix.os }}-cuda-dll-${{ matrix.cuda_version }}-v1
          path: download/cuda

      - name: Setup CUDA
        if: matrix.cuda_version != '' && steps.cuda-dll-cache.outputs.cache-hit != 'true'
        uses: Jimver/cuda-toolkit@v0.2.5
        id: cuda-toolkit
        with:
          method: network
          cuda: ${{ matrix.cuda_version }}

      - name: Extract CUDA DLL
        if: matrix.cuda_version != '' && steps.cuda-dll-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          set -eux

          CUDA_ROOT=$( echo "${{ steps.cuda-toolkit.outputs.CUDA_PATH }}" | tr '\\' '/' )

          mkdir -p download/cuda/bin
          mv "${CUDA_ROOT}/bin/"*.dll download/cuda/bin/

          rm -rf "${CUDA_ROOT}"

      - name: Show disk space (debug info)
        if: matrix.cuda_version != ''
        shell: bash
        run: |
          df -h

      # Download cuDNN
      - name: Export cuDNN url to calc hash
        if: matrix.cudnn_url != ''
        shell: bash
        run: echo "${{ matrix.cudnn_url }}" > download/cudnn_url.txt

      - name: Prepare cuDNN cache
        if: matrix.cudnn_url != ''
        uses: actions/cache@v2
        id: cudnn-dll-cache
        with:
          # update this key when ONNX Runtime cuDNN dependency changed
          key: ${{ matrix.os }}-cudnn-dll-${{ hashFiles('download/cudnn_url.txt') }}-v1
          path: download/cudnn

      - name: Download and extract cuDNN DLLs
        if: matrix.cudnn_url != '' && steps.cudnn-dll-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          set -eux

          curl -L "${{ matrix.cudnn_url }}" > download/cudnn.zip

          unzip download/cudnn.zip cuda/bin/*.dll -d download/cudnn_tmp

          mkdir -p download/cudnn/bin
          mv download/cudnn_tmp/cuda/bin/*.dll download/cudnn/bin/
          rm -rf download/cudnn_tmp

          rm download/cudnn.zip

      - name: Show disk space (debug info)
        if: matrix.cudnn_url != ''
        shell: bash
        run: |
          df -h

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      # Python install path: C:/hostedtoolcache/windows/Python
      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          architecture: ${{ matrix.python_architecture }}

      # Install Python dependencies
      - name: Prepare Python dependencies cache
        uses: actions/cache@v2
        id: pip-cache
        with:
          path: ${{ matrix.pip_cache_path }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r requirements-dev.txt

          # Download pyopenjtalk dictionary
          # try 5 times, sleep 5 seconds before retry
          for i in $(seq 5); do
            EXIT_CODE=0
            python3 -c "import pyopenjtalk; pyopenjtalk._lazy_init()" || EXIT_CODE=$?

            if [ "$EXIT_CODE" = "0" ]; then
              break
            fi

            sleep 5
          done

          if [ "$EXIT_CODE" != "0" ]; then
            exit "$EXIT_CODE"
          fi

      - name: Create download directory
        shell: bash
        run: mkdir -p download/

      # Install Ccache
      - name: Export Ccache url to calc hash
        shell: bash
        run: echo "${{ matrix.ccache_url }}" > download/ccache_url.txt

      - name: Prepare Ccache
        uses: actions/cache@v2
        id: ccache-cache
        with:
          key: ${{ matrix.os }}-ccache-${{ hashFiles('download/ccache_url.txt') }}
          path: download/ccache

      - name: Download Ccache
        if: steps.ccache-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L "${{ matrix.ccache_url }}" > download/ccache.zip
          unzip download/ccache.zip -d download/
          rm download/ccache.zip
          mv download/ccache-*/ download/ccache

      - name: Install Ccache
        shell: bash
        run: |
          echo "$HOME/download/ccache" >> $GITHUB_PATH

      # Download ONNX Runtime
      - name: Export ONNX Runtime url to calc hash
        shell: bash
        run: echo "${{ matrix.onnxruntime_url }}" > download/onnxruntime_url.txt

      - name: Prepare ONNX Runtime cache
        uses: actions/cache@v2
        id: onnxruntime-dll-cache
        with:
          key: ${{ matrix.os }}-onnxruntime-dll-${{ hashFiles('download/onnxruntime_url.txt') }}-v1
          path: download/onnxruntime

      - name: Download ONNX Runtime
        if: steps.onnxruntime-dll-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L "${{ matrix.onnxruntime_url }}" > download/onnxruntime.zip

          # extract only dlls
          unzip download/onnxruntime.zip onnxruntime-*/lib/*.dll -d download/
          rm download/onnxruntime.zip

          mv download/onnxruntime-* download/onnxruntime

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h

      # Download VOICEVOX RESOURCE
      - name: Prepare VOICEVOX RESOURCE cache
        uses: actions/cache@v2
        id: voicevox-resource-cache
        with:
          key: voicevox-resource-${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      - name: Checkout VOICEVOX RESOURCE
        if: steps.voicevox-resource-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v2
        with:
          repository: VOICEVOX/voicevox_resource
          ref: ${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      # Merge VOICEVOX RESOURCE
      - name: Merge VOICEVOX RESOURCE
        shell: bash
        run: |
          set -eux
          rm -r speaker_info
          cp -r download/resource/character_info speaker_info

      # Download VOICEVOX Core
      - name: Prepare VOICEVOX Core cache
        uses: actions/cache@v2
        id: voicevox-core-cache
        with:
          key: ${{ matrix.os }}-voicevox-core-${{ env.VOICEVOX_CORE_VERSION }}
          path: download/core

      - name: Download VOICEVOX Core
        if: steps.voicevox-core-cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          curl -L "https://github.com/VOICEVOX/voicevox_core/releases/download/${{ env.VOICEVOX_CORE_VERSION }}/core.zip" > download/core.zip
          unzip download/core.zip -d download/
          rm download/core.zip

      - name: Generate licenses.json
        shell: bash
        run: python generate_licenses.py > licenses.json

      - name: Cache Nuitka (ccache, module-cache)
        uses: actions/cache@v2
        id: nuitka-cache
        with:
          path: ${{ matrix.nuitka_cache_path }}
          key: ${{ runner.os }}-nuitka-${{ matrix.artifact_name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nuitka-${{ matrix.artifact_name }}-

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h

      - name: Build run.py with Nuitka
        shell: bash
        env:
          NUITKA_CACHE_DIR: ${{ matrix.nuitka_cache_path }}
        run: |
          set -eux

          # Replace version
          sed -i "s/__version__ = \"latest\"/__version__ = \"${{ env.VOICEVOX_ENGINE_VERSION }}\"/" voicevox_engine/__init__.py

          python -m nuitka \
            --standalone \
            --assume-yes-for-downloads \
            --plugin-enable=numpy \
            --plugin-enable=multiprocessing \
            --follow-import-to=numpy \
            --follow-import-to=aiofiles \
            --include-package=uvicorn \
            --include-package=anyio \
            --include-package-data=pyopenjtalk \
            --include-package-data=scipy \
            --include-data-file="licenses.json=./" \
            --include-data-file="user.dic=./" \
            --include-data-file="presets.yaml=./" \
            --include-data-file=download/core/*.bin=./ \
            --include-data-file="download/core/metas.json=./" \
            --include-data-file="download/onnxruntime/lib/onnxruntime.dll=./" \
            --include-data-file="download/core/${{ matrix.voicevox_core_dll_name }}=./" \
            --include-data-dir="speaker_info=./speaker_info" \
            --msvc=14.2 \
            --follow-imports \
            --no-prefer-source-code \
            run.py

      - name: Show disk space (debug info)
        shell: bash
        run: |
          df -h

      - name: Create artifact directory with symlink
        shell: bash
        env:
          PYTHON_SITE_PACKAGES_DIR: C:/hostedtoolcache/windows/python/${{ steps.setup-python.outputs.python-version }}/x64/lib/site-packages
          # create symlink instead of copy (Git Bash)
          # https://qiita.com/ucho/items/c5ea0beb8acf2f1e4772
          MSYS: winsymlinks:nativestrict
        run: |
          set -eux

          # Build artifact directory
          mkdir -p artifact
          ln -sf "$(pwd)/run.dist"/* artifact/

          # Copy DLL dependencies

          if [ -f "download/onnxruntime/lib/onnxruntime_providers_cuda.dll" ]; then
            # ONNX Runtime providers (Nuitka does not copy dynamic loaded libraries)
            ln -sf "$(pwd)/download/onnxruntime/lib"/onnxruntime_*.dll artifact/

            # CUDA
            ln -sf "$(pwd)/download/cuda/bin"/cublas64_*.dll artifact/
            ln -sf "$(pwd)/download/cuda/bin"/cublasLt64_*.dll artifact/
            ln -sf "$(pwd)/download/cuda/bin"/cudart64_*.dll artifact/
            ln -sf "$(pwd)/download/cuda/bin"/cufft64_*.dll artifact/
            ln -sf "$(pwd)/download/cuda/bin"/curand64_*.dll artifact/

            # cuDNN
            ln -sf "$(pwd)/download/cudnn/bin"/cudnn64_*.dll artifact/
            ln -sf "$(pwd)/download/cudnn/bin"/cudnn_*_infer64*.dll artifact/
          fi

          # pysoundfile
          ln -sf "${{ env.PYTHON_SITE_PACKAGES_DIR }}/_soundfile_data" artifact/

      # FIXME: versioned name may be useful; but
      # actions/download-artifact and dawidd6/download-artifact do not support
      # wildcard / forward-matching yet.
      # Currently, It is good to use static artifact name for future binary test workflow.
      # https://github.com/actions/toolkit/blob/ea81280a4d48fb0308d40f8f12ae00d117f8acb9/packages/artifact/src/internal/artifact-client.ts#L147
      # https://github.com/dawidd6/action-download-artifact/blob/af92a8455a59214b7b932932f2662fdefbd78126/main.js#L113
      - uses: actions/upload-artifact@v2
        # env:
        #   VERSIONED_ARTIFACT_NAME: |
        #     ${{ format('{0}-{1}', matrix.artifact_name, (github.event.release.tag_name != '' && github.event.release.tag_name) || github.sha) }}
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            artifact/

  upload-to-release:
    if: github.event.release.tag_name != ''
    needs: [build-mac, build-linux, build-windows]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        artifact_name:
          - macos-x64
          - linux-cpu
          - linux-nvidia
          - windows-cpu
          - windows-nvidia
    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
              p7zip-full

      - name: Download and extract artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}/

      - name: Rearchive and split artifact
        run: |
          # compressed to artifact.7z.001, artifact.7z.002, ...
          7z -r -v1g a "${{ matrix.artifact_name }}.7z" "${{ matrix.artifact_name }}/"

          # Output splitted archive list
          ls ${{ matrix.artifact_name }}.7z.* > archives.txt
          mv archives.txt "${{ matrix.artifact_name }}.7z.txt"

      - name: Upload splitted archives to Release assets
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }} # == github.event.release.tag_name
          file_glob: true
          file: ${{ matrix.artifact_name }}.7z.*
