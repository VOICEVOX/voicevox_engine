name: build-docker
on:
  push:
    branches:
      - master
  release:
    types:
      - created
  workflow_dispatch:
    inputs:
      version:
        description: "バージョン情報（A.BB.C / A.BB.C-preview.D）"
        required: true

env:
  IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/voicevox_engine
  VOICEVOX_RESOURCE_VERSION: "0.20.0"
  VOICEVOX_CORE_VERSION: "0.15.4"

defaults:
  run:
    shell: bash

jobs:
  config: # 全 jobs で利用する定数の定義. `env` が利用できないコンテキストでも利用できる.
    runs-on: ubuntu-latest
    outputs:
      version_or_latest: ${{ steps.vars.outputs.version_or_latest }}
    steps:
      - name: <Setup> Declare variables
        id: vars
        run: |
          : # releaseタグ名か、workflow_dispatchでのバージョン名か、latestが入る
          echo "version_or_latest=${{ github.event.release.tag_name || github.event.inputs.version || 'latest' }}" >> "$GITHUB_OUTPUT"

  build-docker:
    needs: [config]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        tag:
          - ""
          - cpu
          - cpu-ubuntu20.04
          - nvidia
          - nvidia-ubuntu20.04
        include:
          # Ubuntu 20.04
          - tag: ""
            target: runtime-env
            base_image: ubuntu:20.04
            base_runtime_image: ubuntu:20.04
            onnxruntime_version: 1.13.1
            platforms: linux/amd64,linux/arm64/v8
          - tag: cpu
            target: runtime-env
            base_image: ubuntu:20.04
            base_runtime_image: ubuntu:20.04
            onnxruntime_version: 1.13.1
            platforms: linux/amd64,linux/arm64/v8
          - tag: cpu-ubuntu20.04
            target: runtime-env
            base_image: ubuntu:20.04
            base_runtime_image: ubuntu:20.04
            onnxruntime_version: 1.13.1
            platforms: linux/amd64,linux/arm64/v8
          - tag: nvidia
            target: runtime-nvidia-env
            base_image: ubuntu:20.04
            base_runtime_image: nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu20.04
            onnxruntime_version: 1.13.1
            platforms: linux/amd64
          - tag: nvidia-ubuntu20.04
            target: runtime-nvidia-env
            base_image: ubuntu:20.04
            base_runtime_image: nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu20.04
            onnxruntime_version: 1.13.1
            platforms: linux/amd64

    steps:
      - name: <Setup> Check out the repository
        uses: actions/checkout@v4

      - name: <Setup> Prepare Python version
        id: prepare-python
        uses: ./.github/actions/prepare_python
        with:
          only-export-python-version: true

      - name: <Setup> Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: <Setup> Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: <Setup> Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: <Setup> Prepare VOICEVOX RESOURCE cache
        uses: actions/cache@v4
        id: voicevox-resource-cache
        with:
          key: voicevox-resource-${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      - name: <Setup> Check out the VOICEVOX RESOURCE repository
        if: steps.voicevox-resource-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: VOICEVOX/voicevox_resource
          ref: ${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      - name: <Build> Merge VOICEVOX RESOURCE
        env:
          DOWNLOAD_RESOURCE_PATH: download/resource
        run: bash tools/process_voicevox_resource.bash

      - name: <Build/Deploy> Build and Deploy Docker image
        uses: docker/build-push-action@v5
        env:
          IMAGE_TAG:
            |- # If it's a release, add the version, otherwise add the `latest`
            ${{ (
              matrix.tag != '' && (
                format('{0}:{1}-{2}', env.IMAGE_NAME, matrix.tag, needs.config.outputs.version_or_latest)
              ) || format('{0}:{1}', env.IMAGE_NAME, needs.config.outputs.version_or_latest)
            ) }}
          IMAGE_CACHE_FROM:
            |- # Always use the `latest` buildcache. :latest-buildcache or :{tag}-latest-buildcache
            ${{ (
              matrix.tag != '' && (
                format('type=registry,ref={0}:{1}-latest-buildcache', env.IMAGE_NAME, matrix.tag)
              ) || format('type=registry,ref={0}:latest-buildcache', env.IMAGE_NAME)
            ) }}
          IMAGE_CACHE_TO:
            |- # If it's a release, do not create buildcache, otherwise create the `latest` buildcache. :latest-buildcache or :{tag}-latest-buildcache
            ${{ (
              needs.config.outputs.version_or_latest == 'latest' && (
                matrix.tag != '' && (
                  format('type=registry,ref={0}:{1}-latest-buildcache,mode=max', env.IMAGE_NAME, matrix.tag)
                ) || format('type=registry,ref={0}:latest-buildcache,mode=max', env.IMAGE_NAME)
              ) || ''
            ) }}
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            BASE_RUNTIME_IMAGE=${{ matrix.base_runtime_image }}
            PYTHON_VERSION=${{ steps.prepare-python.outputs.python-version }}
            VOICEVOX_ENGINE_VERSION=${{ needs.config.outputs.version_or_latest }}
            VOICEVOX_CORE_VERSION=${{ env.VOICEVOX_CORE_VERSION }}
            VOICEVOX_RESOURCE_VERSION=${{ env.VOICEVOX_RESOURCE_VERSION }}
            USE_GPU=${{ matrix.target == 'runtime-nvidia-env' }}
            ONNXRUNTIME_VERSION=${{ matrix.onnxruntime_version }}
          target: ${{ matrix.target }}
          push: true
          tags: ${{ env.IMAGE_TAG }}
          cache-from: ${{ env.IMAGE_CACHE_FROM }}
          cache-to: ${{ env.IMAGE_CACHE_TO }}
          platforms: ${{ matrix.platforms }}

  run-release-test-workflow:
    # version が指定されている場合のみ実行する
    if: needs.config.outputs.version_or_latest != 'latest'
    needs: [config, build-docker]
    uses: ./.github/workflows/test-engine-container.yml
    with:
      version: ${{ needs.config.outputs.version_or_latest }}
      repo_url: ${{ format('{0}/{1}', github.server_url, github.repository) }} # このリポジトリのURL
