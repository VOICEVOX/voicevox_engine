name: build-docker
on:
  push:
    branches:
      - master
  release:
    types:
      - created
  workflow_dispatch:
    inputs:
      version:
        description: "バージョン情報（A.BB.C / A.BB.C-preview.D）"
        required: true

env:
  IMAGE_NAME: ${{ vars.DOCKERHUB_USERNAME }}/voicevox_engine
  VOICEVOX_RESOURCE_VERSION: "0.22.2"
  VOICEVOX_CORE_VERSION: "0.15.7"

defaults:
  run:
    shell: bash

jobs:
  config: # 全 jobs で利用する定数の定義. `env` が利用できないコンテキストでも利用できる.
    runs-on: ubuntu-latest
    outputs:
      version_or_latest: ${{ steps.vars.outputs.version_or_latest }}
    steps:
      - name: <Setup> Declare variables
        id: vars
        run: |
          : # releaseタグ名か、workflow_dispatchでのバージョン名か、latestが入る
          echo "version_or_latest=${{ github.event.release.tag_name || github.event.inputs.version || 'latest' }}" >> "$GITHUB_OUTPUT"

  build-docker: # 各CPU/GPU環境向けのDockerイメージを個別にビルドする
    needs: [config]
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # 各変数の説明
        # os: ビルド環境のOS
        # prefixes: Docker tagのプレフィックス。カンマ区切り。空文字列の場合、バージョン文字列のみがタグ名になる
        # buildcache_prefix: ビルドキャッシュのプレフィックス。空文字列やカンマは使用不可
        # target: Dockerfileのビルドステージ名
        # base_image: Dockerfileのビルド用ステージのベースイメージ
        # base_runtime_image: Dockerfileの実行用ステージのベースイメージ
        # onnxruntime_version: ONNX Runtimeのバージョン
        # platforms: Dockerのプラットフォームバリアント。カンマ区切り。 参考: https://docs.docker.com/build/building/multi-platform/
        include:
          # OS: Ubuntu 20.04
          # CPU: AMD64
          - os: ubuntu-latest
            prefixes: "cpu-amd64-ubuntu20.04"
            buildcache_prefix: "cpu-amd64-ubuntu20.04"
            target: runtime-env
            base_image: ubuntu:20.04
            base_runtime_image: ubuntu:20.04
            onnxruntime_version: 1.13.1
            platforms: linux/amd64
          # OS: Ubuntu 20.04
          # CPU: ARM64
          - os: ubuntu-24.04-arm
            prefixes: "cpu-arm64-ubuntu20.04"
            buildcache_prefix: "cpu-arm64-ubuntu20.04"
            target: runtime-env
            base_image: ubuntu:20.04
            base_runtime_image: ubuntu:20.04
            onnxruntime_version: 1.13.1
            platforms: linux/arm64/v8
          # OS: Ubuntu 20.04
          # CPU: AMD64
          # GPU: NVIDIA
          - os: ubuntu-latest
            prefixes: "nvidia-ubuntu20.04,nvidia-amd64-ubuntu20.04"
            buildcache_prefix: "nvidia-amd64-ubuntu20.04"
            target: runtime-nvidia-env
            base_image: ubuntu:20.04
            base_runtime_image: nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu20.04
            onnxruntime_version: 1.13.1
            platforms: linux/amd64
          # OS: Ubuntu 22.04
          # CPU: AMD64
          - os: ubuntu-latest
            prefixes: "cpu-amd64,cpu-amd64-ubuntu22.04"
            buildcache_prefix: "cpu-amd64-ubuntu22.04"
            target: runtime-env
            base_image: ubuntu:22.04
            base_runtime_image: ubuntu:22.04
            onnxruntime_version: 1.13.1
            platforms: linux/amd64
          # OS: Ubuntu 22.04
          # CPU: ARM64
          - os: ubuntu-24.04-arm
            prefixes: "cpu-arm64,cpu-arm64-ubuntu22.04"
            buildcache_prefix: "cpu-arm64-ubuntu22.04"
            target: runtime-env
            base_image: ubuntu:22.04
            base_runtime_image: ubuntu:22.04
            onnxruntime_version: 1.13.1
            platforms: linux/arm64/v8
          # OS: Ubuntu 22.04
          # CPU: AMD64
          # GPU: NVIDIA
          - os: ubuntu-latest
            prefixes: "nvidia,nvidia-amd64,nvidia-ubuntu22.04,nvidia-amd64-ubuntu22.04"
            buildcache_prefix: "nvidia-amd64-ubuntu22.04"
            target: runtime-nvidia-env
            base_image: ubuntu:22.04
            base_runtime_image: nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04
            onnxruntime_version: 1.13.1
            platforms: linux/amd64

    steps:
      - name: <Setup> Check out the repository
        uses: actions/checkout@v4

      - name: <Setup> Prepare Python version
        id: prepare-python
        uses: ./.github/actions/prepare_python
        with:
          only-export-python-version: true

      - name: <Setup> Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: <Setup> Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: <Setup> Prepare VOICEVOX RESOURCE cache
        uses: actions/cache@v4
        id: voicevox-resource-cache
        with:
          key: voicevox-resource-${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      - name: <Setup> Check out the VOICEVOX RESOURCE repository
        if: steps.voicevox-resource-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: VOICEVOX/voicevox_resource
          ref: ${{ env.VOICEVOX_RESOURCE_VERSION }}
          path: download/resource

      - name: <Build> Merge VOICEVOX RESOURCE
        env:
          DOWNLOAD_RESOURCE_PATH: download/resource
        run: bash tools/process_voicevox_resource.bash

      - name: <Build> Generate Docker image names
        id: generate-docker-image-names
        run: |
          # Dockerイメージ名を outputs.tags に改行区切りで格納する
          {
            echo "tags<<EOF"

            python3 tools/generate_docker_image_names.py \
              --repository "${{ env.IMAGE_NAME }}" \
              --version "${{ needs.config.outputs.version_or_latest }}" \
              --prefix "${{ matrix.prefixes }}"

            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # ビルドキャッシュに指定するためのDockerイメージ名を生成する
      # NOTE: デフォルトブランチへのコミットの場合のみキャッシュを作成する
      - name: <Build> Generate Docker buildcache image names
        id: generate-docker-buildcache-image-names
        run: |
          # --cache-from に指定するためのDockerイメージ名
          # 常にデフォルトブランチのビルドキャッシュ（*-latest-buildcache）を使用する
          cache_from="type=registry,ref=${{ env.IMAGE_NAME }}:${{ matrix.buildcache_prefix }}-latest-buildcache"

          # --cache-to に指定するためのDockerイメージ名
          # リリースの場合、ビルドキャッシュを作成しないため、空文字列を格納する
          cache_to=""
          if [ "${{ needs.config.outputs.version_or_latest }}" = "latest" ]; then
            cache_to="type=registry,ref=${{ env.IMAGE_NAME }}:${{ matrix.buildcache_prefix }}-latest-buildcache,mode=max"
          fi

          # outputs に格納する
          echo "cache-from=$cache_from" >> "$GITHUB_OUTPUT"
          echo "cache-to=$cache_to" >> "$GITHUB_OUTPUT"

      - name: <Build/Deploy> Build and Deploy Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            BASE_RUNTIME_IMAGE=${{ matrix.base_runtime_image }}
            PYTHON_VERSION=${{ steps.prepare-python.outputs.python-version }}
            VOICEVOX_ENGINE_VERSION=${{ needs.config.outputs.version_or_latest }}
            VOICEVOX_CORE_VERSION=${{ env.VOICEVOX_CORE_VERSION }}
            VOICEVOX_RESOURCE_VERSION=${{ env.VOICEVOX_RESOURCE_VERSION }}
            USE_GPU=${{ matrix.target == 'runtime-nvidia-env' }}
            ONNXRUNTIME_VERSION=${{ matrix.onnxruntime_version }}
          target: ${{ matrix.target }}
          push: true
          tags: ${{ steps.generate-docker-image-names.outputs.tags }}
          cache-from: ${{ steps.generate-docker-buildcache-image-names.outputs.cache-from }}
          cache-to: ${{ steps.generate-docker-buildcache-image-names.outputs.cache-to }}
          platforms: ${{ matrix.platforms }}

  build-docker-manifest: # Dockerイメージを1つのタグにまとめる
    needs: [config, build-docker]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          # OS: Ubuntu 20.04
          # CPU: AMD64, ARM64
          - manifest_list_prefixes: "cpu-ubuntu20.04"
            amd64_manifest_prefix: "cpu-amd64-ubuntu20.04"
            arm64_manifest_prefix: "cpu-arm64-ubuntu20.04"
          # OS: Ubuntu 22.04
          # CPU: AMD64, ARM64
          - manifest_list_prefixes: ",cpu,cpu-ubuntu22.04"
            amd64_manifest_prefix: "cpu-amd64-ubuntu22.04"
            arm64_manifest_prefix: "cpu-arm64-ubuntu22.04"

    steps:
      - name: <Setup> Check out the repository
        uses: actions/checkout@v4

      - name: <Setup> Prepare Python version
        id: prepare-python
        uses: ./.github/actions/prepare_python
        with:
          only-export-python-version: true

      - name: <Setup> Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: <Setup> Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: <Build> Generate Docker manifest list names
        id: generate-manifest-docker-manifest-list-names
        run: |
          # Dockerイメージ名を outputs.manifest_list_tags に改行区切りで格納する
          {
            echo "manifest_list_tags<<EOF"

            python3 tools/generate_docker_image_names.py \
              --repository "${{ env.IMAGE_NAME }}" \
              --version "${{ needs.config.outputs.version_or_latest }}" \
              --prefix "${{ matrix.manifest_list_prefixes }}"

            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: <Build> Generate AMD64 Docker image name
        id: generate-amd64-docker-image-name
        run: |
          # Dockerイメージ名を outputs.amd64_image_tag に改行区切りで格納する
          {
            echo "amd64_image_tag<<EOF"

            python3 tools/generate_docker_image_names.py \
              --repository "${{ env.IMAGE_NAME }}" \
              --version "${{ needs.config.outputs.version_or_latest }}" \
              --prefix "${{ matrix.amd64_manifest_prefix }}"

            echo "EOF"
          } >> "$GITHUB_OUTPUT"
  
      - name: <Build> Generate ARM64 Docker image name
        id: generate-arm64-docker-image-name
        run: |
          # Dockerイメージ名を outputs.arm64_image_tag に改行区切りで格納する
          {
            echo "arm64_image_tag<<EOF"

            python3 tools/generate_docker_image_names.py \
              --repository "${{ env.IMAGE_NAME }}" \
              --version "${{ needs.config.outputs.version_or_latest }}" \
              --prefix "${{ matrix.arm64_manifest_prefix }}"

            echo "EOF"
          } >> "$GITHUB_OUTPUT"
  
      - name: <Build> Create Manifest lists
        run: |
          manifest_list_tags="${{ steps.generate-manifest-docker-manifest-list-names.outputs.manifest_list_tags }}"
          amd64_image_tag="${{ steps.generate-amd64-docker-image-name.outputs.amd64_image_tag }}"
          arm64_image_tag="${{ steps.generate-arm64-docker-image-name.outputs.arm64_image_tag }}"

          IFS=$'\n'
          for manifest_list_tag in $manifest_list_tags; do
            # build-dockerでビルドしたイメージのタグを除くイメージ名を取得
            amd64_image_name=$(echo "${amd64_image_tag}" | cut -d: -f1)
            arm64_image_name=$(echo "${arm64_image_tag}" | cut -d: -f1)

            # build-dockerでビルドしたマニフェストリストから、sha256:digest 形式の単一プラットフォームイメージのダイジェストを取得
            # NOTE: amd64_image_tag, arm64_image_tagの指すイメージが、単一プラットフォームイメージ1つを含むマニフェストリストであることを前提とする
            amd64_image_digest=$(docker manifest inspect "${amd64_image_tag}" | jq -r '.manifests[] | select(.platform.architecture=="amd64") | .digest')
            if [ -z "${amd64_image_digest}" ]; then
              echo "::error::AMD64イメージのダイジェストを取得できませんでした"
              exit 1
            fi

            arm64_image_digest=$(docker manifest inspect "${arm64_image_tag}" | jq -r '.manifests[] | select(.platform.architecture=="arm64") | .digest')
            if [ -z "${arm64_image_digest}" ]; then
              echo "::error::ARM64イメージのダイジェストを取得できませんでした"
              exit 1
            fi

            # イメージ名とダイジェストを指定して、新規のマニフェストリストを作成
            docker manifest create \
              "${manifest_list_tag}" \
              "${amd64_image_name}@${amd64_image_digest}" \
              "${arm64_image_name}@${arm64_image_digest}"

            # マニフェストにプラットフォーム情報を追加
            docker manifest annotate \
              "${manifest_list_tag}" \
              "${amd64_image_name}@${amd64_image_digest}" \
              --os linux \
              --arch amd64

            docker manifest annotate \
              "${manifest_list_tag}" \
              "${arm64_image_name}@${arm64_image_digest}" \
              --os linux \
              --arch arm64 \
              --variant v8
          done

      - name: <Deploy> Deploy Manifest lists
        run: |
          manifest_list_tags="${{ steps.generate-manifest-docker-manifest-list-names.outputs.manifest_list_tags }}"

          IFS=$'\n'
          for manifest_list_tag in ${manifest_list_tags}; do
            docker manifest push "${manifest_list_tag}"
          done

  run-release-test-workflow:
    # version が指定されている場合のみ実行する
    if: needs.config.outputs.version_or_latest != 'latest'
    needs: [config, build-docker, build-docker-manifest]
    uses: ./.github/workflows/test-engine-container.yml
    with:
      version: ${{ needs.config.outputs.version_or_latest }}
      repo_url: ${{ format('{0}/{1}', github.server_url, github.repository) }} # このリポジトリのURL
