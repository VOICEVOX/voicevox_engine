name: build-docker
on:
  # FIXME: デフォルトブランチへのpush時にビルドをテストする
  # https://github.com/VOICEVOX/voicevox_engine/pull/1669#discussion_r2076730954
  workflow_call:
    inputs:
      version:
        type: string
        required: true
      push_dockerhub:
        type: boolean
        default: false
    secrets:
      DOCKERHUB_TOKEN:
        required: true
  workflow_dispatch:
    inputs:
      version:
        description: "バージョン情報（A.BB.C / A.BB.C-preview.D）"
        required: true
      push_dockerhub:
        description: "Docker Hubにプッシュする"
        type: boolean
        default: false

env:
  VOICEVOX_RESOURCE_VERSION: "0.24.0"

defaults:
  run:
    shell: bash

jobs:
  config: # 全 jobs で利用する定数の定義. `env` が利用できないコンテキストでも利用できる.
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
      ghcr_repository: ${{ steps.vars.outputs.ghcr_repository }}
      dockerhub_repository: ${{ steps.vars.outputs.dockerhub_repository }}
    steps:
      - name: <Setup> Declare variables
        id: vars
        run: |
          : # releaseタグ名か、workflow_dispatchでのバージョン名が入る
          echo "version=${{ github.event.release.tag_name || github.event.inputs.version }}" >> "$GITHUB_OUTPUT"

          : # GitHub Container RegistryのDockerイメージリポジトリ
          echo "ghcr_repository=ghcr.io/${{ github.repository }}" | tr "[:upper:]" "[:lower:]" >> "$GITHUB_OUTPUT"

          : # Docker HubのDockerイメージリポジトリ
          echo "dockerhub_repository=${{ vars.DOCKERHUB_USERNAME }}/voicevox_engine" >> "$GITHUB_OUTPUT"

  build-docker:
    needs: [config]
    runs-on: ${{ matrix.os }}

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        # 各変数の説明
        # os: ビルド環境のOS
        # prefixes: Docker tagのプレフィックス。カンマ区切り。空文字列の場合、バージョンのみがタグ名になる
        # buildcache_prefix: ビルドキャッシュのプレフィックス。空文字列やカンマは使用不可
        # target: Dockerfileのビルドステージ名
        # base_image: Dockerfileのベースイメージ
        # platforms: Dockerのプラットフォームバリアント。カンマ区切り。 参考: https://docs.docker.com/build/building/multi-platform/
        include:
          # Ubuntu 22.04 / AMD64
          - os: ubuntu-latest
            prefixes: "cpu-amd64-ubuntu22.04"
            buildcache_prefix: "cpu-amd64-ubuntu22.04"
            target: runtime-env
            base_image: mirror.gcr.io/ubuntu:22.04
            voicevox_engine_target: linux-cpu-x64
            platforms: linux/amd64
          # Ubuntu 22.04 / ARM64
          - os: ubuntu-24.04-arm
            prefixes: "cpu-arm64-ubuntu22.04"
            buildcache_prefix: "cpu-arm64-ubuntu22.04"
            target: runtime-env
            base_image: mirror.gcr.io/ubuntu:22.04
            voicevox_engine_target: linux-cpu-arm64
            platforms: linux/arm64/v8
          # Ubuntu 22.04 / AMD64 / NVIDIA
          - os: ubuntu-latest
            prefixes: "nvidia-ubuntu22.04,nvidia-amd64-ubuntu22.04"
            buildcache_prefix: "nvidia-amd64-ubuntu22.04"
            target: runtime-nvidia-env
            base_image: mirror.gcr.io/ubuntu:22.04
            voicevox_engine_target: linux-nvidia
            platforms: linux/amd64
          # Ubuntu 24.04 / AMD64
          - os: ubuntu-latest
            prefixes: "cpu-amd64,cpu-amd64-ubuntu24.04"
            buildcache_prefix: "cpu-amd64-ubuntu24.04"
            target: runtime-env
            base_image: mirror.gcr.io/ubuntu:24.04
            voicevox_engine_target: linux-cpu-x64
            platforms: linux/amd64
          # Ubuntu 24.04 / ARM64
          - os: ubuntu-24.04-arm
            prefixes: "cpu-arm64,cpu-arm64-ubuntu24.04"
            buildcache_prefix: "cpu-arm64-ubuntu24.04"
            target: runtime-env
            base_image: mirror.gcr.io/ubuntu:24.04
            voicevox_engine_target: linux-cpu-arm64
            platforms: linux/arm64/v8
          # Ubuntu 24.04 / AMD64 / NVIDIA
          - os: ubuntu-latest
            prefixes: "nvidia,nvidia-amd64,nvidia-ubuntu24.04,nvidia-amd64-ubuntu24.04"
            buildcache_prefix: "nvidia-amd64-ubuntu24.04"
            target: runtime-nvidia-env
            base_image: mirror.gcr.io/ubuntu:24.04
            voicevox_engine_target: linux-nvidia
            platforms: linux/amd64

    steps:
      - name: <Setup> Check out the repository
        uses: actions/checkout@v4

      - name: <Setup> Prepare Python
        uses: ./.github/actions/prepare_python

      - name: <Setup> Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: <Setup> Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: <Setup> Login to Docker Hub
        if: inputs.push_dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: <Build> Generate Docker image names
        id: generate-docker-image-names
        run: |
          # Dockerイメージ名を outputs.tags に改行区切りで格納する
          {
            echo "tags<<EOF"

            # ghcr.io
            uv run tools/generate_docker_image_names.py \
              --repository "${{ needs.config.outputs.ghcr_repository }}" \
              --version "${{ needs.config.outputs.version }}" \
              --prefix "${{ matrix.prefixes }}"

            # Docker Hub
            # TODO: レジストリごとにプッシュするプレフィックスを変更したい（ https://github.com/VOICEVOX/voicevox_engine/issues/1663 ）
            # NOTE: workflow_call・workflow_dispatch以外では、 `{{ inputs.push_dockerhub }} == "null"` であるため、 `if [[ false ]]` となる
            if [[ "${{ inputs.push_dockerhub }}" == "true" ]]; then
              uv run tools/generate_docker_image_names.py \
                --repository "${{ needs.config.outputs.dockerhub_repository }}" \
                --version "${{ needs.config.outputs.version }}" \
                --prefix "${{ matrix.prefixes }}"
            fi

            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      # ビルドキャッシュに指定するためのDockerイメージ名を生成する
      # NOTE: ビルドキャッシュは ghcr.io に作成する
      # NOTE: デフォルトブランチへのコミットの場合のみキャッシュを作成する
      - name: <Build> Generate Docker buildcache image names
        id: generate-docker-buildcache-image-names
        run: |
          # --cache-from に指定するためのDockerイメージ名
          # 常にデフォルトブランチのビルドキャッシュ（*-latest-buildcache）を使用する
          cache_from="type=registry,ref=${{ needs.config.outputs.ghcr_repository }}:${{ matrix.buildcache_prefix }}-latest-buildcache"

          # --cache-to に指定するためのDockerイメージ名
          # リリースの場合、ビルドキャッシュを作成しないため、空文字列を格納する
          cache_to=""
          # NOTE: デフォルトブランチでのビルドを一時的にやめているので、常にfalseになっている
          # FIXME: デフォルトブランチでビルドし、デフォルトブランチでのみtrueになるようにする
          if false; then
            cache_to="type=registry,ref=${{ needs.config.outputs.ghcr_repository }}:${{ matrix.buildcache_prefix }}-latest-buildcache,mode=max"
          fi

          # outputs に格納する
          echo "cache-from=$cache_from" >> "$GITHUB_OUTPUT"
          echo "cache-to=$cache_to" >> "$GITHUB_OUTPUT"

      - name: <Build/Deploy> Build and Deploy Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          file: ./Dockerfile
          build-args: |
            BASE_IMAGE=${{ matrix.base_image }}
            VOICEVOX_ENGINE_REPOSITORY=${{ github.repository }}
            VOICEVOX_ENGINE_VERSION=${{ needs.config.outputs.version }}
            VOICEVOX_ENGINE_TARGET=${{ matrix.voicevox_engine_target }}
            VOICEVOX_RESOURCE_VERSION=${{ env.VOICEVOX_RESOURCE_VERSION }}
          target: ${{ matrix.target }}
          push: true
          tags: ${{ steps.generate-docker-image-names.outputs.tags }}
          cache-from: ${{ steps.generate-docker-buildcache-image-names.outputs.cache-from }}
          cache-to: ${{ steps.generate-docker-buildcache-image-names.outputs.cache-to }}
          platforms: ${{ matrix.platforms }}

  build-docker-multi-platform:
    needs: [config, build-docker]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        include:
          # Ubuntu 22.04 / AMD64, ARM64
          - multi_platform_image_prefixes: "cpu-ubuntu22.04"
            amd64_image_prefix: "cpu-amd64-ubuntu22.04"
            arm64_image_prefix: "cpu-arm64-ubuntu22.04"
          # Ubuntu 24.04 / AMD64, ARM64
          - multi_platform_image_prefixes: ",cpu,cpu-ubuntu24.04"
            amd64_image_prefix: "cpu-amd64-ubuntu24.04"
            arm64_image_prefix: "cpu-arm64-ubuntu24.04"

    steps:
      - name: <Setup> Check out the repository
        uses: actions/checkout@v4

      - name: <Setup> Prepare Python
        uses: ./.github/actions/prepare_python

      - name: <Setup> Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: <Setup> Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: <Setup> Login to Docker Hub
        if: inputs.push_dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: <Build/Deploy> Build and Deploy multi-platform Docker image for ghcr.io
        env:
          IMAGE_NAME: ${{ needs.config.outputs.ghcr_repository }}
          VERSION_OR_LATEST: ${{ needs.config.outputs.version }} # TODO: 環境変数名をVERSIONにする？
          AMD64_IMAGE_PREFIX: ${{ matrix.amd64_image_prefix }}
          ARM64_IMAGE_PREFIX: ${{ matrix.arm64_image_prefix }}
          MULTI_PLATFORM_IMAGE_PREFIXES: ${{ matrix.multi_platform_image_prefixes }}
        run: |
          bash ./tools/build_and_push_multi_platform_docker_images.bash

      - name: <Build/Deploy> Build and Deploy multi-platform Docker image for Docker Hub
        if: inputs.push_dockerhub
        env:
          IMAGE_NAME: ${{ needs.config.outputs.dockerhub_repository }}
          VERSION_OR_LATEST: ${{ needs.config.outputs.version }} # TODO: 環境変数名をVERSIONにする？
          AMD64_IMAGE_PREFIX: ${{ matrix.amd64_image_prefix }}
          ARM64_IMAGE_PREFIX: ${{ matrix.arm64_image_prefix }}
          MULTI_PLATFORM_IMAGE_PREFIXES: ${{ matrix.multi_platform_image_prefixes }}
        run: |
          bash ./tools/build_and_push_multi_platform_docker_images.bash

  run-release-test-workflow:
    # NOTE: デフォルトブランチでのビルドを一時的にやめているので、常にtrueになっている
    # FIXME: Docker Hubにpushしない場合はfalseになるようにする
    if: true
    needs: [config, build-docker, build-docker-multi-platform]
    uses: ./.github/workflows/test-engine-container.yml
    with:
      version: ${{ needs.config.outputs.version }}
      repo_url: ${{ format('{0}/{1}', github.server_url, github.repository) }} # このリポジトリのURL
