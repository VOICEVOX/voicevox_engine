name: test

on:
  push:
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  # [ubuntu-latest, macos-latest, windows-latest]
        python: [3.7]
        include:
        - os: ubuntu-latest
          path: ~/.cache/pip
        # - os: macos-latest
        #   path: ~/Library/Caches/pip
        - os: windows-latest
          path: ~\AppData\Local\pip\Cache

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - uses: actions/cache@v2
        id: pip-cache
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-test.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install libraries for ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libsndfile1-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements-test.txt

      - run: pysen run lint

      - name: Run pytest and get coverage
        run: |
          coverage run --omit=test/* -m pytest

      - name: Submit coverage to Coveralls
        if: matrix.os == 'ubuntu-latest'
        run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create coverage result
        if: github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest'
        run: |
          coverage report > report.txt

      - name: Comment coverage result to Pull Requests
        if: github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest'
        uses: actions/github-script@v5.0.0
        with:
          github-token: ${{ secrets.TOKEN_THAT_CAN_GITHUB_REPO_ACCESS }}
          script: |
            const fs = require('fs')
            const baseReport = fs.readFileSync('report.txt', 'utf8').toString().split('\n')
            let report = ''
            for (let i = 0; i < baseReport.length; i++) {
              const line = baseReport[i].split(' ').filter(v => v)
              if (i === 1 && line.length === 1) {
                report += "|:---|---:|---:|---:|\n"
              } else if (line.length === 1) {
                continue
              } else {
                if (i !== 0 && line.length === 4) {
                  const parcent = Number(line[3].replace("%", ""))
                  let color = 'green'
                  if (parcent < 50) {
                    color = 'red'
                  } else if (parcent < 90) {
                    color = 'orange'
                  }
                  line[3] = `![coverage-${parcent}%](https://img.shields.io/badge/coverage-${parcent}%25-${color}.svg)`
                }
                report += "|" + line.join("|") + "|\n"
              }
              if (line[0] === 'TOTAL') break
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Coverage Result\n\n${report}`
            })

      - name: Check licenses
        shell: bash
        run: |
          python -m venv venv

          if [ -d "venv/Scripts" ]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi

          pip install -r requirements-dev.txt
          python generate_licenses.py > /dev/null
