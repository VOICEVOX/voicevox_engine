name: test

on:
  push:
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]  # [ubuntu-latest, macos-latest, windows-latest]
        python: [3.8]
        include:
        - os: ubuntu-latest
          path: ~/.cache/pip
        # - os: macos-latest
        #   path: ~/Library/Caches/pip
        - os: windows-latest
          path: ~\AppData\Local\pip\Cache

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}

      - uses: actions/cache@v2
        id: pip-cache
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-test.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install libraries for ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libsndfile1-dev

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -r requirements-test.txt

      - run: pysen run lint

      - name: Run pytest and get coverage
        run: |
          coverage run --omit=test/* -m pytest

      - name: Submit coverage to Coveralls
        if: matrix.os == 'ubuntu-latest'
        run: coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create coverage result
        if: github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest'
        run: |
          mkdir report
          coverage report > report/report.txt
          echo ${{ github.event.number }} > report/pr_num.txt

      - name: Upload coverage result
        if: github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: report
          path: report/

      - name: Check licenses
        shell: bash
        run: |
          python -m venv venv

          if [ -d "venv/Scripts" ]; then
            source venv/Scripts/activate
          else
            source venv/bin/activate
          fi

          python -m pip install -r requirements-dev.txt
          python generate_licenses.py > /dev/null
